{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","useStyles","makeStyles","table","minWidth","App","classes","useState","movie","setMovie","searchmonth","setSearchmonth","getMovieData","a","axios","get","data","console","log","useEffect","className","type","placeholder","onChange","e","target","value","TableContainer","component","Paper","Table","TableHead","align","TableBody","filter","item","plTitle","toLowerCase","includes","map","scope","fTitle","views","likes","Rating","Index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qVAYMA,EAAkBC,aAAW,SAACC,GAAD,MAAY,CAC7CC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,OAAOC,MACtCC,MAAON,EAAMG,QAAQC,OAAOG,OAE9BC,KAAM,CACJC,SAAU,OANUV,CAQpBW,KAEEC,EAAiBZ,aAAW,SAACC,GAAD,MAAY,CAC5CY,KAAM,CACJ,qBAAsB,CACpBV,gBAAiBF,EAAMG,QAAQU,OAAOC,WAHrBf,CAMnBgB,KAEEC,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAqHCC,EAjHH,WACV,IAAMC,EAAUL,IAChB,EAA0BM,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBACA,GADA,UACsCA,mBAAS,KAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAY,uCAAG,4BAAAC,EAAA,+EAEEC,IAAMC,IACvB,8DAHe,OAEXC,EAFW,OAMjBC,QAAQC,IAAIF,EAAKA,MACjBP,EAASO,EAAKA,MAPG,gDASjBC,QAAQC,IAAR,MATiB,yDAAH,qDAgBlB,OAHAC,qBAAU,WACRP,MACC,IAED,sBAAKQ,UAAU,MAAf,UACE,gEAQA,uBACEC,KAAK,OACLC,YAAY,oBACZC,SAAU,SAACC,GACTb,EAAea,EAAEC,OAAOC,UAoB5B,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,CAAOV,UAAWd,EAAQH,MAAO,aAAW,mBAA5C,UACE,cAAC4B,EAAA,EAAD,UACE,eAAC/B,EAAA,EAAD,WACA,cAACjB,EAAD,yBACE,cAACA,EAAD,CAAiBiD,MAAM,SAAvB,mBACA,cAACjD,EAAD,CAAiBiD,MAAM,QAAvB,mBACA,cAACjD,EAAD,CAAiBiD,MAAM,QAAvB,mBACA,cAACjD,EAAD,CAAiBiD,MAAM,SAAvB,8BAGJ,cAACC,EAAA,EAAD,UACGzB,EACE0B,QAAO,SAACC,GACP,MAAkB,IAAdzB,GAGFyB,EAAKC,QAAQC,cAAcC,SAAS5B,EAAY2B,eAFzCF,OACF,KAaRI,KAAI,SAACJ,GACJ,OACE,eAACvC,EAAD,WACE,cAACb,EAAD,CAAiB6C,UAAU,KAAKY,MAAM,MAAtC,SACGL,EAAKM,SAER,cAAC1D,EAAD,CAAiBiD,MAAM,SAAvB,SACGG,EAAKC,UAER,cAACrD,EAAD,CAAiBiD,MAAM,QAAvB,SACGG,EAAKO,QAER,cAAC3D,EAAD,CAAiBiD,MAAM,QAAvB,SACGG,EAAKQ,QAER,cAAC5D,EAAD,CAAiBiD,MAAM,SAAvB,SACGG,EAAKS,WAdWT,EAAKU,qBC/G7BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ab3f3f8a.chunk.js","sourcesContent":["import './App.css';\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n});\n\nconst App = () => {\n  const classes = useStyles();\n  const [movie, setMovie] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchmonth, setSearchmonth] = useState(\"\");\n\n  const getMovieData = async () => {\n    try {\n      const data = await axios.get(\n        \"https://nuggetsnetwork.com/Products/imdb_excel_2_json.json\"\n        // \"http://makeup-api.herokuapp.com/api/v1/products.json?brand=maybelline\"\n      );\n      console.log(data.data);\n      setMovie(data.data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    getMovieData();\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1>Netflix Movie Trailers Tracker</h1>\n      {/* <input\n        type=\"text\"\n        placeholder=\"Search movie here\"\n        onChange={(e) => {\n          setSearch(e.target.value);\n        }}\n      /> */}\n      <input\n        type=\"text\"\n        placeholder=\"Search month here\"\n        onChange={(e) => {\n          setSearchmonth(e.target.value);\n        }}\n      />\n\n      {/* {product\n        .filter((item) => {\n          if (search == \"\") {\n            return item;\n          } else if (item.name.toLowerCase().includes(search.toLowerCase())) {\n            return item;\n          }\n        })\n        .map((item) => {\n          return (\n            <p>\n              {item.name} - {item.price}\n            </p>\n          );\n        })} */}\n\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n            <StyledTableCell>Movie Name</StyledTableCell>\n              <StyledTableCell align=\"center\">Month</StyledTableCell>\n              <StyledTableCell align=\"right\">Views</StyledTableCell>\n              <StyledTableCell align=\"right\">Likes</StyledTableCell>\n              <StyledTableCell align=\"center\">IMDB Rating</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {movie\n              .filter((item) => {\n                if (searchmonth ==\"\") {\n                  return item;\n                } else if (\n                  item.plTitle.toLowerCase().includes(searchmonth.toLowerCase())\n                  ){\n                  return item;\n                }\n                // if (search ==\"\") {\n                //   return item;\n                // } else if (\n                //   item.fTitle.toLowerCase().includes(search.toLowerCase())\n                //   ){\n                //   return item;\n                // }\n              })\n              .map((item) => {\n                return (\n                  <StyledTableRow key={item.Index}>\n                    <StyledTableCell component=\"th\" scope=\"row\">\n                      {item.fTitle}\n                    </StyledTableCell>\n                    <StyledTableCell align=\"center\">\n                      {item.plTitle}\n                    </StyledTableCell>\n                    <StyledTableCell align=\"right\">\n                      {item.views}\n                    </StyledTableCell>\n                    <StyledTableCell align=\"right\">\n                      {item.likes}\n                    </StyledTableCell>\n                    <StyledTableCell align=\"center\">\n                      {item.Rating}\n                    </StyledTableCell>\n                  </StyledTableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}